Section 1
    Requirement
        basic javascript + nodeJS
        basic databases mysql
        install nodeJS
        install https://expressjs.com/

    Express generator adalah sebuah tools untuk mengenerate kerangka aplikasi express secara mudah
    di express js struktur foldernya sesuka kita untuk mengaturnya dan tidak terlalu diatur

    setup github https://www.gitkraken.com/learn/git/git-config
    https://nulab.com/learn/software-development/git-tutorial/git-commands-settings/git-config-commands/

    jadi sebelum kita push ke github wajib git add dan git commit agar bisa dipush

Section2 
    membuat routing sederhana menggunakan expressjs

    http://localhost:3000/users
    Tambahkan routes baru 
    router.get('/profile', (req, res, next)=>{
    res.send(200)
    })
    lalu akses ke http://localhost:3000/users/profile

    catatan ketika membuat route ada 3 parameter untuk parameter next sebagai middleware
    router.get('/', function(req, res, next) {
    });

    kemudian buat routing baru di routes/users.js
    //membuat response menggunakan JSON dan arrow function
    router.get('/json', (req,res)=>{
    res.json({
        message: 'Hai nama saya adalah juan daniel'
    })
    })

    Install Nodemon
    Nodemon digunakan untuk autoreload/auto refresh ketika menjalankan aplikasi di terminal

section 3 setup env 
    https://www.npmjs.com/package/dotenv
    https://www.bill.web.id/2017/03/mengapa-env-file-laravel-tidak.html
    dotenv digunakan sebagai environment variable modul untuk loads semua file kedalam proccess.env
    dan dotenv ini terletak di variable .env
    cara memanggil variabel .env yaitu proccess.env_namaVariable

Section 4 setup Sequelize
    https://sequelize.org/
    sequelize adalah sebuah ORM modern yang support berbagai macam bahasa databases seperti mysql,postgre, mariasql, oracle dll.
    sequelize membantu kita untuk berinteraksi secara langsung dengan databases seperti query CRUD databases 
    sequelize-cli membantu kita untuk berinteraksi dengan beberapa command line bawaaan dari sequelize terminal
    cara melihat perintah perintah yang ada dengan cara "npx sequelize"

    command ~ sequelize
        sequelize db:migrate                        Run pending migrations
        sequelize db:migrate:schema:timestamps:add  Update migration table to have timestamps
        sequelize db:migrate:status                 List the status of all migrations
        sequelize db:migrate:undo                   Reverts a migration
        sequelize db:migrate:undo:all               Revert all migrations ran
        sequelize db:seed                           Run specified seeder
        sequelize db:seed:undo                      Deletes data from the database
        sequelize db:seed:all                       Run every seeder
        sequelize db:seed:undo:all                  Deletes data from the database
        sequelize db:create                         Create database specified by configuration
        sequelize db:drop                           Drop database specified by configuration
        sequelize init                              Initializes project
        sequelize init:config                       Initializes configuration
        sequelize init:migrations                   Initializes migrations
        sequelize init:models                       Initializes models
        sequelize init:seeders                      Initializes seeders
        sequelize migration:generate                Generates a new migration file
        sequelize migration:create                  Generates a new migration file
        sequelize model:generate                    Generates a model and its migration
        sequelize model:create                      Generates a model and its migration
        sequelize seed:generate                     Generates a new seed file
        sequelize seed:create                       Generates a new seed file

    npx sequelize init: melakukan setup sequelize didalam project, dan melakukan generate. hasil dari generate perintah tersebut
    membuat sebuah folder baru yaitu config, migrations and models
    pergi ke webserver XAMPP klik phpmyadmin http://localhost/phpmyadmin/
    buat sebuah database baru yang bernama butik
    pergi ke .env buat variabel baru sebagai berikut
        DB_USERNAME = root
        DB_PASSWORD = ""
        DB_HOSTNAME = 127.0.0.1 # bisa menuliskan ip 127.0.0.1 ataupun "localhost"
        DB_NAME     = butik # nama databases yang dibuat
        DB_DIALECT  = mysql # databases yang digunakan
    kemudian pergi ke config/config.json
        karena diconfig.json isi datanya masih berbentuk extension json untuk itu tidak bisa menggunakan variabel environment didalam config.json
        untuk itu kita ubah extensionnya menjadi config.js kemudian kita ubah codenya (liat dicomment #after) setelah itu kita akan panggil .env didalam config.js
        alasan kita memanggilnya? config.js itu terpisah dengan app.js dan kita harus inisialisasi kembali di file config.js
        untuk memanggil .env nya copy "require('dotenv').config()" terus paste didalam config.js paling atas. selanjutnya copy isis dari file .env
            const{
                    DB_USERNAME,
                    DB_PASSWORD,
                    DB_HOSTNAME,
                    DB_NAME,
                    DB_DIALECT,
                } = process.env;
        paste ke dalam config.js dan taro di bawah require('dotenv').config()
        langkah selanjutnya ubah isi nilai didalam module.exports dengan variabel const yang didefinisikan. setelah selesai configurasi kita bisa membuat/menjalankan model dan migrations yang terkoneksi dengan webserver XAMPP
        jangan lupa untuk pergi ke models/index.js ubah 
            const config = require(__dirname + '/../config/config.json')[env]; menjadi
            const config = require(__dirname + '/../config/config')[env];
        selesai sudah konfigurasi sequelize 

section 5 migration
    migration merupakan sebuah teknik membuat CRUD struktur table menggunakan ORM
    'sequelize migration:generate' ataupun menggunakan alias 'sequelize db:create'
    kemudian jalankan perintah sebagai berikut 
        npx sequelize migration:create --name create-products-table #membuat table products
        setelah berhasil migrations kita ubah file dialam folder migrations dan ini merupakan hasil dari migrations 
         #before
            /** @type {import('sequelize-cli').Migration} */
            module.exports = {
            async up (queryInterface, Sequelize) {
                /**
                * Add altering commands here.
                *
                * Example:
                * await queryInterface.createTable('users', { id: Sequelize.INTEGER });
                */
            },
        #after
                module.exports = {
                async up (queryInterface, Sequelize) {
                    await queryInterface.createTable('products',{ 
                    id: Sequelize.INTEGER,
                    type: Sequelize.INTEGER,
                    primaryKey: true,
                    autoIncrement: true,
                    allowNull: false
                    },
                    {
                    name:{
                        type: Sequelize.STRING,
                        allowNull:false,
                    }, 
                    brand:{
                        type: Sequelize.STRING,
                        allowNull:false,
                    },
                    description:{
                        type: Sequelize.TEXT,
                    },
                    createdAt:{
                        type: Sequelize.DATE,
                        allowNull: false,
                    },
                    createdAt:{
                        type: Sequelize.DATE,
                        allowNull: false,
                    },
                    }

                    );
                },
    setelah melakukan configurasi di folder migrations mari jalankan perintah berikut
    npx sequelize db:migrate
        ERROR: Please install mysql2 package manually lalu install package mysql2 dengan perintah
        npm i mysql2 --save
        kemudian jalankan kembali


    Catatan:
    kita perlu membuat createdAt dan updateAt untuk memberitahukan kita kapan data ini dibuat dan diupdate
    ketika menjalankan perintah db migrations perintah 'async up' lah yang dijalankan 
    dan ketika menjalankan perintah migration rollback perintah  'async down' lah yang dijalankan
    setelah selesai dijalankan terdapat struktur table product dan table sequelizemeta
    untuk table product hasil dari migration yang telah dibuat 
    dan table sequelizemeta adalah sebuah histori dari migrations yang setiap dijalankan

section 6 setup model
    fungsi model disini adalah untuk mengkoneksikan/menghubungkan dengan table yang kita buat
    cara manual dengan cara buat file baru bernama products di dalam folder models copy file ini
    'Prodcut' merupakan nama dari modelnya
    //tablename merupakan konfigurasi tambahan dari namatable dari database
        module.exports = (sequelize,DataTypes) =>{
        const Product = sequelize.define('Product',{
            id: {
                type: DataTypes.INTEGER,
                primaryKey: true,
                autoIncrement: true,
                allowNull:true,
            },
                name:{
                type: DataTypes.STRING,
                allowNull:false,
                }, 
                brand:{
                type: DataTypes.STRING,
                allowNull:false,
                },
                description:{
                type: DataTypes.TEXT,
                },
                createdAt:{
                type: DataTypes.DATE,
                allowNull: false,
                },
                updateAt:{
                type: DataTypes.DATE,
                allowNull: false,
                }},
                {
                    tableName: 'products'   
                });
                return Product

                }
section 7 Create API               
    copy file berikut ini kedalam file routes/products.js
        var express = require('express');
        var router = express.Router();

        router.post('/',async(req,res,next) =>{
            res.send("ini adalah POST")
        })

        module.exports = router;
    kemudian pergi ke app.js tambahkan
        var productsRouter = require('./routes/products');
        app.use('/products',productsRouter)

    setelah itu kita buat sebuah validation yang berguna untuk validasi data yang dikirimkan dari frontend ke backend
    kita gunakan library https://www.npmjs.com/package/fastest-validator fastest-validator
    setelah install kita definisikan schema validasinya  di dalam router.post (products.js)
                var express = require('express');
                var router = express.Router();

                const Validator = require('fastest-validator');
                const v = new Validator();

                router.post('/',async(req,res,next) =>{
                    const schema ={
                        name:'string',
                        brand:'string',
                        description:'string|optional',
                    }
                    const validate = v.validate(req.body, schema);
                    if (validate.length){
                        return res.
                        status(400).
                        json(validate);
                    }
                    res.send('ok')
                });

                module.exports = router;

    setelah membuat validasi pergi ke postman lakukan post ke body request json dan masukan data ini {} terus send, setelah itu masukan script ini untuk menambahkannya.
    {
    "name": "baju",
    "brand": "uniqlo",
    "description": "ini adalah baju yang mahal dari brand tanah merah"
    }
    data berhasil dimasukan respone 'ok'
    jika kita ubah name: menjadi integer akan error hasilnya seperti ini
    [
        {
            "type": "string",
            "message": "The 'name' field must be a string.",
            "field": "name",
            "actual": 13
        }
    ]
    setelah berhasil menambahkan data api kita akan memasukannya ke dalam database dengan cara sebagai berikut:
    memanggil model nya terlebih dahulu didalam file models
        const {Products} = require('../models')
    setelah kita panggil model product kita bisa tambahkan menjadi scripts berikut:
        const product = await Product.create(req.body);
        return product;
    pas kita kirim data terjadi request terus menerus tidak berhenti karena tidak mereturn sebuah response apapun menggunakan express js
    jadi tidak boleh menggunakan return product; ganti dnegan
        res.json(product);
    masih error dimenit 46 https://www.youtube.com/watch?v=_PVuqFBqPdo
    
    catatan
     ika respone dari data itu null tidak boleh lebih baik dikirim berbentuk object